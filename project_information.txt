Project: Assignment 3
Author(s): Philip Regan
Source Code Copyright: Copyright (c) 2015 Philip Regan All Rights Reserved.
Additional Copyright: None
Source: New source only; no adaptations.
Requirements: None
Notes:
* OAuth credential management: https://console.developers.google.com/project/enhanced-medium-112111/apiui/credential

window.setInterval
window.checkAuth
handleAuthResult
loadDriveApi
listFiles -> JSON

<click link to file>
appendLink
window.checkAuth
handleAuthResult
loadDriveApi
displayFile -> JSON

"to get the file list to work, I decoupled the authorization from the list loading functionality, and that seems to help. I also had to use the $q service (not covered or even mentioned in class) to manage thread control (I don't like callback rainbows), and at least one $scope.$digest();"

"I did a couple of things different then what you seem to have done. 
* I decoupled the listFiles callback from the auth callback. The handleAuthResult just sets an isAuthorized variable on my service. 
	* Instead I watched for the my isAuthorized variable to change then fetch the files in my controllers (list and document). 
	* This gave me a little more control over how things were happening, although I'm sure there's other (possibly cleaner) ways to do it as well. 
* I also had to use $rootScope.$apply in a few places in order to get things to update (see other posts in this thread). 
* Your check auth using the interval should just move into the directive definition. 
	* Take a look at the example from the module videos http://plnkr.co/edit/kwW5BuWERrbIcfWF948h?p=preview (Links to an external site.) on how to do that. 
* You don't need the window.action because that's being handled with angular routes. 
* As for testing, I just mocked all of the google auth/client code and utilize callbacks (see other posts in this thread). 
X As for the 403, looks like you've exceeded your auth attempts... you might be able to create new credentials to get around that or wait a day."
[@
/* What happens with $apply */ 
angular.module('myApp',[]).controller('MessageController', function($scope) {
    
      $scope.getMessage = function() {
        setTimeout(function() {
          $scope.$apply(function() {
            //wrapped this within $apply
            $scope.message = 'Fetched after 3 seconds'; 
            console.log('message:' + $scope.message);
          });
        }, 2000);
      }
      $scope.getMessage();
    });
@]
...OR...
[@
$scope.getMessage = function() {
  setTimeout(function() {
    $scope.message = 'Fetched after two seconds';
    console.log('message:' + $scope.message);
    $scope.$apply(); //this triggers a $digest
  }, 2000);
};
@]
Bugs:
*

Roadmap:
X Step 1: Get this running
    X set up an "application" with the Google Drive API
        // https://developers.google.com/drive/web/quickstart/js#step_1_enable_the_api_name
* Step 2: Convert the existing application to angular
    * A routing config that will have 2 views, a list (or index) and a document view
        // each of those routes are (probably) going to need a controller
    * A Google Drive Service to handle all of the calls
        // remember to mock all usage of $http with $httpBackend
    * A directive to handle the oauth button
    * A service to hold on to the CLIENT_ID and SCOPES for use in the Google Drive Service.
* Step 3
    * Translate the text
        * Establish a service for the public API at http://ancient-anchorage-9224.herokuapp.com/zombify?q=zombify
        * Testing this service should use $httpBackend.
* Step 4: Testing
    // Any controller, directive, or service will need tests associated with it.
    // don't test whether the API is working. Mock it.
    // Don't test services through the controllers, test one thing at a time.
* Actionable Step 2: Convert existing app to angular
	X get gulp up to date with all the frameworks
	X where is google docs api loaded ion routastic?
	X fix jshint errors
	X get karma up to date with all the frameworks
    X Create CLIENT_ID and SCOPES service
    > Create directive for oauth button // see Week-10-solution
        X include in index.html as button
        X Use GoogleDriveService as controller
        X Move init code in head of HTML into controller or service
        X load google drive api in head or in service
        [@
            <script>
                function init() {
                    gapi.client.load('drive', 'v2');
                }
            </script>
            <script src="https://apis.google.com/js/client.js?onload=init"></script>
            <script src="vendor.js"></script>
            <script src="app.js"></script>
        @]
        X add window.checkAuth to oauth button directive
        > Update view with $rootScope.apply() // see discussions
        X Update oauth directive to use $interval for the interval-ed checkAuth code that updates isAuthorized in controller(? we need to inject controller? No, that's not right)
        X Add isAuthorized variable for list fetch to check before fetching
        	// the goal is to decouple the auth from the list files
        - $q service may need to be used to manage async

    X Create Google Drive Service // see routastic
        X Migrate app.js code
        X inject client/scopes service
    X Create list controller // see app.js; requires oauth directive, Google
        * Add oauth directive
    X Create document view controller // see app.js; requires oauth directive
     * Create routing config // see Routastic
        * Merge doc.html and index.html common code
        * Create list.html view
        * Create doc.html view
        * Updated index.html to use ng-view
    * Test file list loading
    * Handle document loading
    	* use Routing config
    		* update doc.html to /doc
    	* use oauth for loading
    		* get id from URL
    		* Beware of having to load the API a second time
    * Update client id and scopes service to pull from server // see routastic
    * Tests
    	* should get list of files from google api
    	* should list all the files in the DOM
    	* should get a file when link clicked
    	* should display contents of file
* Step 3: Translate the text
    * Create service for the public API
    * inject service into document view controller
* Rubric
    X Created a client ID
    * Use of routing
        * For at least the two views: list and document
    * Use of directive
        * for at least the oauth button
    * Use of service for gdata
    * Use of service for ztranslator
    * Testing
        * controllers, directives and services.

Change History:
    15_11_06_01_00_000: Started source

    /* COMPLETED STEP 1 */

    15_11_15_02_01_000: Started prep to convert to Angular
    15_11_15_02_02_000: Added get code to ConfigService and updated config to json
    15_11_15_02_03_000: Updated ConfigService to populate values from config files and init upon load
    15_11_15_02_04_000: Updated GoogleDriveService to use ConfigService for auth tokens
    15_11_15_02_05_000: Updated gulp and karma to load ConfigService first
	15_11_15_02_06_000: Refactored everything to single app.js file to have easier control over load order and file management
	15_11_15_02_06_001: Fixed bugs in bower, gulp, and karma
	15_11_15_02_07_000: Added oauth directive to html
	15_11_21_02_08_000: Updated to better manage google api code
	15_11_22_02_09_000: Updated to load files on page load. Man, that was hard.
	15_11_27_02_10_000: Updated GoogleDriveService to use $q
	
    cd ~/cscie32/DRRrrRrvrr; git status; git commit -a -m "Updated GoogleDriveService to use $q"; git push origin master; git status
